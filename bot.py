import os
from dotenv import load_dotenv
import logging
import requests
import xml.etree.ElementTree as ET
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –í–≤–æ–¥–∏–º —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = os.getenv('BOT_TOKEN')

# API –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–§
CBR_API_URL = 'https://www.cbr.ru/scripts/XML_daily.asp'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ConvertState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_currency_from = State()
    waiting_for_currency_to = State()
    waiting_for_restart = State()

class RateState(StatesGroup):
    waiting_for_currency = State()

# –°–ª–æ–≤–∞—Ä—å –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π –≤–∞–ª—é—Ç
currency_aliases = {
    '–¥–æ–ª–ª–∞—Ä': ('USD', '–î–æ–ª–ª–∞—Ä –°–®–ê'),
    '–¥–æ–ª–ª–∞—Ä—ã': ('USD', '–î–æ–ª–ª–∞—Ä –°–®–ê'),
    '–±–∞–∫—Å—ã': ('USD', '–î–æ–ª–ª–∞—Ä –°–®–ê'),
    '–µ–≤—Ä–æ': ('EUR', '–ï–≤—Ä–æ'),
    '—Ä—É–±–ª—å': ('RUB', '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å'),
    '—Ä—É–±–ª–∏': ('RUB', '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å'),
    '–π–µ–Ω–∞': ('JPY', '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞'),
    '–∏–µ–Ω–∞': ('JPY', '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞'),
    '—Ñ—É–Ω—Ç': ('GBP', '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç'),
    '—Ñ—É–Ω—Ç—ã': ('GBP', '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç'),
    '—é–∞–Ω—å': ('CNY', '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å'),
    '—é–∞–Ω–∏': ('CNY', '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å'),
    '–¥–∏–Ω–∞—Ä': ('RSD', '–°–µ—Ä–±—Å–∫–∏–π –¥–∏–Ω–∞—Ä'),
    '–¥–∏–Ω–∞—Ä—ã': ('RSD', '–°–µ—Ä–±—Å–∫–∏–π –¥–∏–Ω–∞—Ä'),
    '—Ç–µ–Ω–≥–µ': ('KZT', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ'),
    '—Ä—É–ø–∏—è': ('INR', '–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è'),
    '—Ä—É–ø–∏–∏': ('INR', '–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è')
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∞–ª—é—Ç –≤ –∫–æ–¥—ã
def get_currency_code(user_input):
    user_input = user_input.lower().strip()
    return currency_aliases.get(user_input, (user_input.upper(), user_input.upper()))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å —Å–∞–π—Ç–∞ –¶–ë –†–§
def get_exchange_rates():
    response = requests.get(CBR_API_URL)
    if response.status_code != 200:
        return {}

    rates = {'RUB': 1.0}  # –†—É–±–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞ 1.0
    root = ET.fromstring(response.content)

    for valute in root.findall('Valute'):
        char_code = valute.find('CharCode').text  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã (USD, EUR –∏ —Ç. –¥.)
        value = float(valute.find('Value').text.replace(',', '.'))  # –ö—É—Ä—Å –∫ —Ä—É–±–ª—é
        nominal = int(valute.find('Nominal').text)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 JPY)
        rates[char_code] = value / nominal  # –ü—Ä–∏–≤–æ–¥–∏–º –∫—É—Ä—Å –∫ 1 –µ–¥–∏–Ω–∏—Ü–µ –≤–∞–ª—é—Ç—ã

    return rates

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–û –†–£–ë–õ–Ø
    for currency in rates:
        rates[currency] = 1 / rates[currency]  # –î–µ–ª–∞–µ–º –∏–∑ RUB –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É

    return rates

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è" , "üìä –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å" –∏ "üö™ –í—ã–π—Ç–∏"
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')],
        [KeyboardButton(text='üìä –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å')],
        [KeyboardButton(text='üö™ –í—ã–π—Ç–∏')]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ "‚úÖ –î–∞" –∏ "‚ùå –ù–µ—Ç"
restart_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text='‚úÖ –î–∞'), KeyboardButton(text='‚ùå –ù–µ—Ç')]],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def log_user_message(message: Message):
    user = message.from_user
    logging.info(f'üë§ {user.full_name} (ID: {user.id}, Username: @{user.username}) ‚Üí {message.text}')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∏–º–µ–Ω–∏)
@dp.message(Command('start'))
async def start_command(message: Message):
    await log_user_message(message)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–¥—Ä—É–≥")
    user_name = message.from_user.first_name if message.from_user.first_name else "–¥—Ä—É–≥"

    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}! üòä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:', 
        reply_markup=main_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å"
@dp.message(lambda message: message.text == 'üìä –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å')
async def get_rate_start(message: Message, state: FSMContext):
    await log_user_message(message)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫—É—Ä—Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, –µ–≤—Ä–æ, —Ä—É–±–ª–∏):')
    await state.set_state(RateState.waiting_for_currency)

# –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –∏ –≤—ã–≤–æ–¥–∏–º –∫—É—Ä—Å –∫ —Ä—É–±–ª—é
@dp.message(RateState.waiting_for_currency)
async def process_currency_rate(message: Message, state: FSMContext):
    await log_user_message(message)
    currency, currency_name = get_currency_code(message.text)

    rates = get_exchange_rates()
    if currency not in rates:
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, –µ–≤—Ä–æ, —Ä—É–±–ª–∏):')
        return

    rate = rates[currency]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
    await message.answer(
        f'üìä –ö—É—Ä—Å {currency} ({currency_name}) –∫ —Ä—É–±–ª—é: **1 {currency} = {rate:.2f} RUB**\nüìå –ö—É—Ä—Å –ø–æ –¥–∞–Ω–Ω—ã–º –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–§.',
        parse_mode='Markdown'
    )

    # –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    action_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')],
            [KeyboardButton(text='üìä –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å')],
            [KeyboardButton(text='üö™ –í—ã–π—Ç–∏')]
        ],
        resize_keyboard=True
    )
    
    await message.answer('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=action_keyboard)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"
@dp.message(lambda message: message.text == 'üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')
@dp.message(Command('convert'))
async def start_conversion(message: Message, state: FSMContext):
    await log_user_message(message)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ConvertState.waiting_for_amount)

# –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É
@dp.message(ConvertState.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    await log_user_message(message)
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, –µ–≤—Ä–æ, —Ä—É–±–ª–∏):')
        await state.set_state(ConvertState.waiting_for_currency_from)
    except ValueError:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')

# –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É "–∏–∑ –∫–æ—Ç–æ—Ä–æ–π" –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
@dp.message(ConvertState.waiting_for_currency_from)
async def process_currency_from(message: Message, state: FSMContext):
    await log_user_message(message)
    currency_from, currency_name_from = get_currency_code(message.text)

    rates = get_exchange_rates()
    if currency_from not in rates:
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, –µ–≤—Ä–æ, —Ä—É–±–ª–∏):')
        return

    await state.update_data(currency_from=currency_from, currency_name_from=currency_name_from)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, EUR, –¥–æ–ª–ª–∞—Ä—ã, —é–∞–Ω–∏):')
    await state.set_state(ConvertState.waiting_for_currency_to)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "‚úÖ –î–∞" (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å) –∏ "‚ùå –ù–µ—Ç" (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞)
@dp.message(ConvertState.waiting_for_restart)
async def restart_or_end(message: Message, state: FSMContext):
    await log_user_message(message)
    if message.text == '‚úÖ –î–∞':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(ConvertState.waiting_for_amount)
    elif message.text == '‚ùå –ù–µ—Ç':
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        action_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text='üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')],
                [KeyboardButton(text='üìä –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å')],
                [KeyboardButton(text='üö™ –í—ã–π—Ç–∏')]
            ],
            resize_keyboard=True
        )
        await message.answer('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=action_keyboard)
        await state.clear()


# –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
@dp.message(ConvertState.waiting_for_currency_to)
async def process_currency_to(message: Message, state: FSMContext):
    await log_user_message(message)
    currency_to, currency_name_to = get_currency_code(message.text)
    user_data = await state.get_data()

    amount = user_data['amount']
    currency_from = user_data['currency_from']
    currency_name_from = user_data['currency_name_from']

    rates = get_exchange_rates()

    if currency_to not in rates:
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, –µ–≤—Ä–æ, —Ä—É–±–ª–∏):')
        return

    converted_amount = amount * (rates[currency_from] / rates[currency_to])

    await message.answer(
        f'‚úÖ {amount} {currency_from} ({currency_name_from}) = {converted_amount:.2f} {currency_to} ({currency_name_to})\nüìå –ö—É—Ä—Å –ø–æ –¥–∞–Ω–Ω—ã–º –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–§.'
        '\n\n‚ùì –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–Ω—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é?',
        reply_markup=restart_keyboard
    )

    await state.set_state(ConvertState.waiting_for_restart)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üö™ –í—ã–π—Ç–∏"
@dp.message(lambda message: message.text == 'üö™ –í—ã–π—Ç–∏')
async def exit_bot(message: Message):
    await log_user_message(message)
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! üòä\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start.', 
                         reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
@dp.message()
async def handle_unexpected_message(message: Message):
    await log_user_message(message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É
    await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:', reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')],
            [KeyboardButton(text='üìä –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å')],
            [KeyboardButton(text='üö™ –í—ã–π—Ç–∏')]
        ],
        resize_keyboard=True
    ))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
